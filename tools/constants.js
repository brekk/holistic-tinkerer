export const AST = Object.freeze({
  AnyTypeAnnotation: "AnyTypeAnnotation",
  ArrayExpression: "ArrayExpression",
  ArrayPattern: "ArrayPattern",
  ArrayTypeAnnotation: "ArrayTypeAnnotation",
  ArrowFunctionExpression: "ArrowFunctionExpression",
  AssignmentExpression: "AssignmentExpression",
  AssignmentPattern: "AssignmentPattern",
  AwaitExpression: "AwaitExpression",
  BigIntLiteral: "BigIntLiteral",
  BinaryExpression: "BinaryExpression",
  BindExpression: "BindExpression",
  Block: "Block",
  BlockStatement: "BlockStatement",
  BooleanLiteral: "BooleanLiteral",
  BooleanLiteralTypeAnnotation: "BooleanLiteralTypeAnnotation",
  BooleanTypeAnnotation: "BooleanTypeAnnotation",
  BreakStatement: "BreakStatement",
  CallExpression: "CallExpression",
  CatchClause: "CatchClause",
  ClassBody: "ClassBody",
  ClassDeclaration: "ClassDeclaration",
  ClassExpression: "ClassExpression",
  ClassImplements: "ClassImplements",
  ClassMethod: "ClassMethod",
  ClassPrivateMethod: "ClassPrivateMethod",
  ClassPrivateProperty: "ClassPrivateProperty",
  ClassProperty: "ClassProperty",
  ClassPropertyDefinition: "ClassPropertyDefinition",
  Comment: "Comment",
  CommentBlock: "CommentBlock",
  CommentLine: "CommentLine",
  ComprehensionBlock: "ComprehensionBlock",
  ComprehensionExpression: "ComprehensionExpression",
  ConditionalExpression: "ConditionalExpression",
  ContinueStatement: "ContinueStatement",
  DebuggerStatement: "DebuggerStatement",
  Declaration: "Declaration",
  DeclareClass: "DeclareClass",
  DeclareExportAllDeclaration: "DeclareExportAllDeclaration",
  DeclareExportDeclaration: "DeclareExportDeclaration",
  DeclareFunction: "DeclareFunction",
  DeclareInterface: "DeclareInterface",
  DeclareModule: "DeclareModule",
  DeclareModuleExports: "DeclareModuleExports",
  DeclareOpaqueType: "DeclareOpaqueType",
  DeclareTypeAlias: "DeclareTypeAlias",
  DeclareVariable: "DeclareVariable",
  DeclaredPredicate: "DeclaredPredicate",
  Decorator: "Decorator",
  Directive: "Directive",
  DirectiveLiteral: "DirectiveLiteral",
  DoExpression: "DoExpression",
  DoWhileStatement: "DoWhileStatement",
  EmptyStatement: "EmptyStatement",
  EmptyTypeAnnotation: "EmptyTypeAnnotation",
  ExistentialTypeParam: "ExistentialTypeParam",
  ExistsTypeAnnotation: "ExistsTypeAnnotation",
  ExportAllDeclaration: "ExportAllDeclaration",
  ExportBatchSpecifier: "ExportBatchSpecifier",
  ExportDeclaration: "ExportDeclaration",
  ExportDefaultDeclaration: "ExportDefaultDeclaration",
  ExportDefaultSpecifier: "ExportDefaultSpecifier",
  ExportNamedDeclaration: "ExportNamedDeclaration",
  ExportNamespaceSpecifier: "ExportNamespaceSpecifier",
  ExportSpecifier: "ExportSpecifier",
  Expression: "Expression",
  ExpressionStatement: "ExpressionStatement",
  File: "File",
  Flow: "Flow",
  FlowPredicate: "FlowPredicate",
  FlowType: "FlowType",
  ForAwaitStatement: "ForAwaitStatement",
  ForInStatement: "ForInStatement",
  ForOfStatement: "ForOfStatement",
  ForStatement: "ForStatement",
  Function: "Function",
  FunctionDeclaration: "FunctionDeclaration",
  FunctionExpression: "FunctionExpression",
  FunctionTypeAnnotation: "FunctionTypeAnnotation",
  FunctionTypeParam: "FunctionTypeParam",
  GeneratorExpression: "GeneratorExpression",
  GenericTypeAnnotation: "GenericTypeAnnotation",
  Identifier: "Identifier",
  IfStatement: "IfStatement",
  Import: "Import",
  ImportDeclaration: "ImportDeclaration",
  ImportDefaultSpecifier: "ImportDefaultSpecifier",
  ImportExpression: "ImportExpression",
  ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
  ImportSpecifier: "ImportSpecifier",
  InferredPredicate: "InferredPredicate",
  InterfaceDeclaration: "InterfaceDeclaration",
  InterfaceExtends: "InterfaceExtends",
  InterfaceTypeAnnotation: "InterfaceTypeAnnotation",
  InterpreterDirective: "InterpreterDirective",
  IntersectionTypeAnnotation: "IntersectionTypeAnnotation",
  JSXAttribute: "JSXAttribute",
  JSXClosingElement: "JSXClosingElement",
  JSXClosingFragment: "JSXClosingFragment",
  JSXElement: "JSXElement",
  JSXEmptyExpression: "JSXEmptyExpression",
  JSXExpressionContainer: "JSXExpressionContainer",
  JSXFragment: "JSXFragment",
  JSXIdentifier: "JSXIdentifier",
  JSXMemberExpression: "JSXMemberExpression",
  JSXNamespacedName: "JSXNamespacedName",
  JSXOpeningElement: "JSXOpeningElement",
  JSXOpeningFragment: "JSXOpeningFragment",
  JSXSpreadAttribute: "JSXSpreadAttribute",
  JSXSpreadChild: "JSXSpreadChild",
  JSXText: "JSXText",
  LabeledStatement: "LabeledStatement",
  Line: "Line",
  Literal: "Literal",
  LogicalExpression: "LogicalExpression",
  MemberExpression: "MemberExpression",
  MemberTypeAnnotation: "MemberTypeAnnotation",
  MetaProperty: "MetaProperty",
  MethodDefinition: "MethodDefinition",
  MixedTypeAnnotation: "MixedTypeAnnotation",
  ModuleSpecifier: "ModuleSpecifier",
  NewExpression: "NewExpression",
  Node: "Node",
  Noop: "Noop",
  NullLiteral: "NullLiteral",
  NullLiteralTypeAnnotation: "NullLiteralTypeAnnotation",
  NullTypeAnnotation: "NullTypeAnnotation",
  NullableTypeAnnotation: "NullableTypeAnnotation",
  NumberLiteralTypeAnnotation: "NumberLiteralTypeAnnotation",
  NumberTypeAnnotation: "NumberTypeAnnotation",
  NumericLiteral: "NumericLiteral",
  NumericLiteralTypeAnnotation: "NumericLiteralTypeAnnotation",
  ObjectExpression: "ObjectExpression",
  ObjectMethod: "ObjectMethod",
  ObjectPattern: "ObjectPattern",
  ObjectProperty: "ObjectProperty",
  ObjectTypeAnnotation: "ObjectTypeAnnotation",
  ObjectTypeCallProperty: "ObjectTypeCallProperty",
  ObjectTypeIndexer: "ObjectTypeIndexer",
  ObjectTypeInternalSlot: "ObjectTypeInternalSlot",
  ObjectTypeProperty: "ObjectTypeProperty",
  ObjectTypeSpreadProperty: "ObjectTypeSpreadProperty",
  OpaqueType: "OpaqueType",
  OptionalCallExpression: "OptionalCallExpression",
  OptionalMemberExpression: "OptionalMemberExpression",
  ParenthesizedExpression: "ParenthesizedExpression",
  Pattern: "Pattern",
  Position: "Position",
  Printable: "Printable",
  PrivateName: "PrivateName",
  Program: "Program",
  Property: "Property",
  PropertyPattern: "PropertyPattern",
  QualifiedTypeIdentifier: "QualifiedTypeIdentifier",
  RegExpLiteral: "RegExpLiteral",
  RestElement: "RestElement",
  RestProperty: "RestProperty",
  ReturnStatement: "ReturnStatement",
  SequenceExpression: "SequenceExpression",
  SourceLocation: "SourceLocation",
  Specifier: "Specifier",
  SpreadElement: "SpreadElement",
  SpreadElementPattern: "SpreadElementPattern",
  SpreadProperty: "SpreadProperty",
  SpreadPropertyPattern: "SpreadPropertyPattern",
  Statement: "Statement",
  StringLiteral: "StringLiteral",
  StringLiteralTypeAnnotation: "StringLiteralTypeAnnotation",
  StringTypeAnnotation: "StringTypeAnnotation",
  Super: "Super",
  SwitchCase: "SwitchCase",
  SwitchStatement: "SwitchStatement",
  TSAnyKeyword: "TSAnyKeyword",
  TSArrayType: "TSArrayType",
  TSAsExpression: "TSAsExpression",
  TSBigIntKeyword: "TSBigIntKeyword",
  TSBooleanKeyword: "TSBooleanKeyword",
  TSCallSignatureDeclaration: "TSCallSignatureDeclaration",
  TSConditionalType: "TSConditionalType",
  TSConstructSignatureDeclaration: "TSConstructSignatureDeclaration",
  TSConstructorType: "TSConstructorType",
  TSDeclareFunction: "TSDeclareFunction",
  TSDeclareMethod: "TSDeclareMethod",
  TSEnumDeclaration: "TSEnumDeclaration",
  TSEnumMember: "TSEnumMember",
  TSExportAssignment: "TSExportAssignment",
  TSExpressionWithTypeArguments: "TSExpressionWithTypeArguments",
  TSExternalModuleReference: "TSExternalModuleReference",
  TSFunctionType: "TSFunctionType",
  TSHasOptionalTypeAnnotation: "TSHasOptionalTypeAnnotation",
  TSHasOptionalTypeParameterInstantiation:
    "TSHasOptionalTypeParameterInstantiation",
  TSHasOptionalTypeParameters: "TSHasOptionalTypeParameters",
  TSImportEqualsDeclaration: "TSImportEqualsDeclaration",
  TSImportType: "TSImportType",
  TSIndexSignature: "TSIndexSignature",
  TSIndexedAccessType: "TSIndexedAccessType",
  TSInferType: "TSInferType",
  TSInterfaceBody: "TSInterfaceBody",
  TSInterfaceDeclaration: "TSInterfaceDeclaration",
  TSIntersectionType: "TSIntersectionType",
  TSLiteralType: "TSLiteralType",
  TSMappedType: "TSMappedType",
  TSMethodSignature: "TSMethodSignature",
  TSModuleBlock: "TSModuleBlock",
  TSModuleDeclaration: "TSModuleDeclaration",
  TSNamespaceExportDeclaration: "TSNamespaceExportDeclaration",
  TSNeverKeyword: "TSNeverKeyword",
  TSNonNullExpression: "TSNonNullExpression",
  TSNullKeyword: "TSNullKeyword",
  TSNumberKeyword: "TSNumberKeyword",
  TSObjectKeyword: "TSObjectKeyword",
  TSOptionalType: "TSOptionalType",
  TSParameterProperty: "TSParameterProperty",
  TSParenthesizedType: "TSParenthesizedType",
  TSPropertySignature: "TSPropertySignature",
  TSQualifiedName: "TSQualifiedName",
  TSRestType: "TSRestType",
  TSStringKeyword: "TSStringKeyword",
  TSSymbolKeyword: "TSSymbolKeyword",
  TSThisType: "TSThisType",
  TSTupleType: "TSTupleType",
  TSType: "TSType",
  TSTypeAliasDeclaration: "TSTypeAliasDeclaration",
  TSTypeAnnotation: "TSTypeAnnotation",
  TSTypeAssertion: "TSTypeAssertion",
  TSTypeLiteral: "TSTypeLiteral",
  TSTypeOperator: "TSTypeOperator",
  TSTypeParameter: "TSTypeParameter",
  TSTypeParameterDeclaration: "TSTypeParameterDeclaration",
  TSTypeParameterInstantiation: "TSTypeParameterInstantiation",
  TSTypePredicate: "TSTypePredicate",
  TSTypeQuery: "TSTypeQuery",
  TSTypeReference: "TSTypeReference",
  TSUndefinedKeyword: "TSUndefinedKeyword",
  TSUnionType: "TSUnionType",
  TSUnknownKeyword: "TSUnknownKeyword",
  TSVoidKeyword: "TSVoidKeyword",
  TaggedTemplateExpression: "TaggedTemplateExpression",
  TemplateElement: "TemplateElement",
  TemplateLiteral: "TemplateLiteral",
  ThisExpression: "ThisExpression",
  ThisTypeAnnotation: "ThisTypeAnnotation",
  ThrowStatement: "ThrowStatement",
  TryStatement: "TryStatement",
  TupleTypeAnnotation: "TupleTypeAnnotation",
  TypeAlias: "TypeAlias",
  TypeAnnotation: "TypeAnnotation",
  TypeCastExpression: "TypeCastExpression",
  TypeParameter: "TypeParameter",
  TypeParameterDeclaration: "TypeParameterDeclaration",
  TypeParameterInstantiation: "TypeParameterInstantiation",
  TypeofTypeAnnotation: "TypeofTypeAnnotation",
  UnaryExpression: "UnaryExpression",
  UnionTypeAnnotation: "UnionTypeAnnotation",
  UpdateExpression: "UpdateExpression",
  VariableDeclaration: "VariableDeclaration",
  VariableDeclarator: "VariableDeclarator",
  Variance: "Variance",
  VoidTypeAnnotation: "VoidTypeAnnotation",
  WhileStatement: "WhileStatement",
  WithStatement: "WithStatement",
  YieldExpression: "YieldExpression"
})
